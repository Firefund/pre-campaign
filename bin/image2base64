#!/usr/bin/env node

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const minimist_1 = tslib_1.__importDefault(require("minimist"));
const glob_1 = tslib_1.__importDefault(require("glob"));
const path = tslib_1.__importStar(require("path"));
const file_type_1 = require("file-type");
const camelcase_1 = tslib_1.__importDefault(require("camelcase"));
const chokidar = tslib_1.__importStar(require("chokidar"));
const util = tslib_1.__importStar(require("util"));
const packageJson = tslib_1.__importStar(require("../package.json"));
function showToolVersion() {
    console.log(`Version: ${packageJson.version}`);
}
function showHelp() {
    console.log(`Version ${packageJson.version}
Syntax:   image2base64-cli [options] [file...]
Examples: image2base64-cli favicon.ico --scss
          image2base64-cli *.ico --scss variables.scss
          image2base64-cli *.ico --less variables.less
          image2base64-cli *.ico --es6 variables.js
          image2base64-cli *.ico --scss variables.scss --less variables.less --json variables.json --es6 variables.js --base demo
          image2base64-cli *.ico --scss variables.scss --less variables.less --json variables.json --es6 variables.js --base demo --watch
Options:
 -h, --help                                         Print this message.
 -v, --version                                      Print the version
 -w, --watch                                        Watch mode
 --base                                             Base directory
 --json                                             Generate json file of variables
 --scss                                             Generate scss file
 --less                                             Generate less file
 --es6                                              Generate es6 file
`);
}
function globAsync(pattern, ignore) {
    return new Promise((resolve, reject) => {
        glob_1.default(pattern, { ignore }, (error, matches) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(matches);
            }
        });
    });
}
const writeFileAsync = util.promisify(fs.writeFile);
function getVariableName(filePath) {
    return camelcase_1.default(path.normalize(filePath).replace(/\\|\//g, '-'));
}
async function executeCommandLine() {
    const argv = minimist_1.default(process.argv.slice(2), { '--': true });
    const inputFiles = argv._;
    const showVersion = argv.v || argv.version;
    if (showVersion) {
        showToolVersion();
        return;
    }
    if (argv.h || argv.help) {
        showHelp();
        return;
    }
    if (!inputFiles || inputFiles.length === 0) {
        throw new Error('Error: no input files.');
    }
    const uniqFiles = await globAsync(argv._.length === 1 ? argv._[0] : `{${argv._.join(',')}}`);
    const base = argv.base;
    const watchMode = argv.w || argv.watch;
    if (watchMode) {
        const variables = [];
        let count = 0;
        chokidar.watch(inputFiles).on('all', (type, file) => {
            console.log(`Detecting ${type}: ${file}`);
            if (type === 'add' || type === 'change') {
                const index = variables.findIndex(v => v.file === file);
                imageToBase64(file, base).then(variable => {
                    if (index === -1) {
                        variables.push(variable);
                    }
                    else {
                        variables[index] = variable;
                    }
                    count++;
                    if (count >= uniqFiles.length) {
                        writeVariables(argv, variables);
                    }
                });
            }
            else if (type === 'unlink') {
                const index = variables.findIndex(v => v.file === file);
                if (index !== -1) {
                    variables.splice(index, 1);
                    writeVariables(argv, variables);
                }
            }
        });
    }
    else if (uniqFiles.length > 0) {
        const variables = await Promise.all(uniqFiles.map(file => imageToBase64(file, base)));
        await writeVariables(argv, variables);
    }
}
const readFileAsync = util.promisify(fs.readFile);
async function imageToBase64(file, base) {
    const buffer = await readFileAsync(file);
    const fileTypeResult = await file_type_1.fromBuffer(buffer);
    if (fileTypeResult) {
        const mime = fileTypeResult.mime;
        const base64 = `data:${mime};base64,${buffer.toString('base64')}`;
        return { name: base ? path.relative(base, file) : file, file, base64 };
    }
    else {
        throw new Error('no valid file type');
    }
}
async function writeVariables(argv, variables) {
    variables.sort((v1, v2) => v1.name.localeCompare(v2.name));
    if (argv.json) {
        if (typeof argv.json === 'string') {
            await writeFileAsync(argv.json, JSON.stringify(variables, null, '  '));
        }
        else {
            console.log(JSON.stringify(variables, null, '  '));
        }
    }
    if (argv.scss) {
        const content = generatedHead + variables.map(v => `$${v.name.split('.').join('-')}: '${v.base64}';\n`).join('');
        if (typeof argv.scss === 'string') {
            await writeFileAsync(argv.scss, content);
        }
        else {
            console.log(content);
        }
    }
    if (argv.less) {
        const content = generatedHead + variables.map(v => `@${v.name.split('.').join('-')}: '${v.base64}';\n`).join('');
        if (typeof argv.less === 'string') {
            await writeFileAsync(argv.less, content);
        }
        else {
            console.log(content);
        }
    }
    const es6 = argv.es6;
    if (es6) {
        const wantTypescript = typeof es6 === 'string' && es6.endsWith('.ts');
        let content = generatedHead;
        if (wantTypescript) {
            content += '// tslint:disable\n// eslint:disable\n';
        }
        else {
            content += '// eslint:disable\n';
        }
        content += variables.map(v => `export const ${getVariableName(v.name)} = \`${v.base64}\`\n`).join('');
        if (wantTypescript) {
            content += '// tslint:enable\n// eslint:enable\n';
        }
        else {
            content += '// eslint:enable\n';
        }
        if (typeof es6 === 'string') {
            await writeFileAsync(es6, content);
        }
        else {
            console.log(content);
        }
    }
}
const generatedHead = `/**
 * This file is generated by 'image2base64-cli'
 * It is not mean to be edited by hand
 */
`;
executeCommandLine().then(() => {
}, (error) => {
    if (error instanceof Error) {
        console.error(error.message);
    }
    else {
        console.error(error);
    }
    process.exit(1);
});
